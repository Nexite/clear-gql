// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

enum MetadataVisibility {
  PUBLIC // Visible to everyone
  INTERNAL // Visible to event volunteers
  ADMIN // Visible only to regional manager (and employees)
}

model EventGroup {
  // Metadata
  id                 String         @id @default(cuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata           Json?
  // Data
  name               String
  startDate          DateTime
  endDate            DateTime
  ticketPrice        Float
  earlyBirdPrice     Float
  earlyBirdCutoff    DateTime
  registrationCutoff DateTime
  // Relations
  events             Event[]
  schedule           ScheduleItem[]
}

model Event {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata  Json?

  // Data
  name               String
  startDate          DateTime
  endDate            DateTime
  ticketPrice        Float
  earlyBirdPrice     Float
  earlyBirdCutoff    DateTime
  registrationCutoff DateTime
  managers           String[] // codeday account usernames
  registrationsOpen  Boolean  @default(false)
  contentfulWebname  String?

  // Relations
  eventGroup   EventGroup     @relation(fields: [eventGroupId], references: [id])
  eventGroupId String
  venue        Venue?         @relation(fields: [venueId], references: [id])
  venueId      String?
  sponsors     Sponsor[]
  tickets      Ticket[]
  schedule     ScheduleItem[]
}

model Venue {
  // Metadata
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata     Json?
  // Data
  name         String?
  capacity     Int?
  address      String?
  mapLink      String?
  contactName  String?
  contactEmail String?
  contactPhone String?

  // Relations
  events Event[]
}

model Sponsor {
  // Metadata
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata     Json?
  // Data
  name         String
  logoImageUri String?
  description  String?
  perks        String?
  amount       Int      @default(0)
  contactName  String?
  contactEmail String?
  contactPhone String?

  // Relations
  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
}

model Person {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata  Json?

  // Data
  firstName String
  lastName  String
  email     String?
  phone     String?
  age       Int?
  username  String?
  pronouns  String?

  Ticket Ticket[]
}

enum TicketType {
  STUDENT
  TEACHER
  VIP
  MENTOR
  JUDGE
  STAFF
}

model Ticket {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata  Json?
  // Data
  firstName String
  lastName  String
  email     String?
  phone     String?
  age       Int?

  waiverSigned Boolean    @default(false)
  couponCode   String?
  type         TicketType @default(STUDENT)

  // Relations
  guardian Person? @relation(fields: [personId], references: [id])

  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId String?
  personId  String?
}

model Payment {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata  Json?

  // Data
  total  Float
  Ticket Ticket[]
}

model ScheduleItem {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true)
  metadata  Json?

  // Data
  type           String?
  name           String?
  description    String?
  link           String?
  hostName       String?
  hostEmail      String?
  hostPronoun    String?
  organizerName  String?
  organizerEmail String?
  organizerPhone String?
  start          DateTime?
  end            DateTime?
  finalized      Boolean   @default(false)
  internal       Boolean   @default(false)

  // Relations
  event        Event?      @relation(fields: [eventId], references: [id])
  eventId      String?
  eventGroup   EventGroup? @relation(fields: [eventGroupId], references: [id])
  eventGroupId String?


}
